from aiogram import Router,types, F 
from aiogram.types import CallbackQuery, Message,LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from .bot_instance import dp,bot
from dotenv import load_dotenv 
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from sqlalchemy import select, insert, update, delete
import os 
from dbmedia.config import Admins
from dbmedia.models import Appointment
from buttons import Cancel
from dbmedia.states import NewAppointment,TitleApp, DateApp, TimeApp, SlotApp

from dbmedia.session import get_db

router = Router()

@router.message(F.text == "X –Ω–∞–∂–º–∏ ‚ùå")
async def cancelOperation(message: Message, state: FSMContext):
    async with get_db() as session:
        result = await session.execute(select(Appointment))
        appointments = result.scalars().all()
    keyboard = ReplyKeyboardBuilder()
    
    for appointment in appointments:
        keyboard.button(
            text=f"_{appointment.title}_{appointment.id}"
        )
    keyboard.adjust(3)
    keyboard.button(
        text="–°–æ–∑–¥–∞—Ç—å"
        )
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!",reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.clear()
    return 


@router.message(Command("admin"))
async def getInfo(message: Message):
    if message.from_user.id not in Admins:
        await message.answer("–î–æ—Å—Ç—É–ø –≤–æ—Å–ø—Ä–µ—â–µ–Ω!")
        return 
    async with get_db() as session:
        result = await session.execute(select(Appointment))
        appointments = result.scalars().all()
    keyboard = ReplyKeyboardBuilder()
    
    for appointment in appointments:
        keyboard.button(
            text=f"_{appointment.title}_{appointment.id}"
        )
    keyboard.adjust(3)
    keyboard.button(
        text="–°–æ–∑–¥–∞—Ç—å"
        )
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å", reply_markup=keyboard.as_markup(resize_keyboard=True))

@router.message(F.text.startswith("_"))
async def editAppointment(message: Message):
    msg = message.text
    msg = msg[::-1]
    indexOfIter = msg.index("_")
    ID = msg[0:indexOfIter]
    appointments = ["–£–¥–∞–ª–∏—Ç—å","–ù–∞–∑–≤–∞–Ω–∏–µ","–î–∞—Ç–∞","–í—Ä–µ–º—è","–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ","–ù–∞–∑–∞–¥","–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"]
    if message.from_user.id not in Admins:
        await message.answer("–î–æ—Å—Ç—É–ø –≤–æ—Å–ø—Ä–µ—â–µ–Ω!")
        return 
    keyboard = ReplyKeyboardBuilder()
    for appointment in appointments:
        keyboard.button(
            text=f"{appointment}_{ID}"
        )
    keyboard.adjust(3)
    await message.answer("üîß –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", reply_markup=keyboard.as_markup(resize_keyboard=True))

# –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å")
async def editOptionsinMake(message: Message, state : FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏",reply_markup=Cancel)
    await state.set_state(NewAppointment.title)


@router.message(NewAppointment.title)
async def getNewTitle(message: Message, state : FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏",reply_markup=Cancel)
    await state.set_state(NewAppointment.date)


@router.message(NewAppointment.date)
async def getNewDate(message: Message, state : FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏",reply_markup=Cancel)
    await state.set_state(NewAppointment.time)


@router.message(NewAppointment.time)
async def getNewTime(message: Message, state : FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª-–≤–æ –º–µ—Å—Ç –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏",reply_markup=Cancel)
    await state.set_state(NewAppointment.slots)


@router.message(NewAppointment.slots)
async def getNewSlots(message: Message, state : FSMContext):
    msg = message.text
    if not msg.isdigit():
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑")
        return  # –ù–µ –∑–∞–±—ã–≤–∞–π return!

    await state.update_data(slots=message.text)
    data = await state.get_data()
    cs = int(data['slots'])

    new_appointment = Appointment(
        title=data['title'],
        date=data['date'],
        time=data['time'],
        count_of_slots=cs
    )

    async with get_db() as session:
        session.add(new_appointment)
        await session.commit()  # ‚¨ÖÔ∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É

        # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º select ‚Äî —Ç—É—Ç —É–∂–µ –µ—Å—Ç—å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
        result = await session.execute(select(Appointment))
        appointments = result.scalars().all()

        keyboard = ReplyKeyboardBuilder()
        for appointment in appointments:
            keyboard.button(text=f"_{appointment.title}_{appointment.id}")
        keyboard.adjust(3)
        keyboard.button(text="–°–æ–∑–¥–∞—Ç—å")

        await message.answer(
            f"""–î–∞—Ç–∞ - {new_appointment.date}
–¢–µ–º–∞ - {new_appointment.title}
–í—Ä–µ–º—è - {new_appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {new_appointment.count_of_slots}
""",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        await state.clear()

    


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
@router.message(F.text.contains("_"))
async def editOptionsinMake(message: Message, state : FSMContext):
    msg = message.text
    msg = msg[::-1] 
    indexOfIter = msg.index("_")
    ID = msg[0:indexOfIter] # ID –∑–∞–ø–∏—Å–∏ –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö 
    option = msg[indexOfIter+1::]
    option = option[::-1] # –°–∞–º–æ –¥–µ–π—Å—Ç–≤–∏–µ  
    
    if option == "–£–¥–∞–ª–∏—Ç—å":
        async with get_db() as session:
            result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
            appointment = result.scalars().first()
            if appointment:
                await session.delete(appointment)
                await session.commit()
                await message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å")
    elif option == "–ù–∞–∑–≤–∞–Ω–∏–µ":
        await state.update_data(ID=ID)
        await state.set_state(TitleApp.data)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    elif option == "–î–∞—Ç–∞":
        await state.update_data(ID=ID)
        await state.set_state(DateApp.data)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É")
    elif option == "–í—Ä–µ–º—è":
        await state.update_data(ID=ID)
        await state.set_state(TimeApp.data)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è")
    elif option == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ":
        await state.update_data(ID=ID)
        await state.set_state(SlotApp.data)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
    elif option == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å":
        async with get_db() as session:
            result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
            appointment = result.scalars().first()
            await message.answer(f"""–î–∞—Ç–∞ - {appointment.date}
–¢–µ–º–∞ - {appointment.title}
–í—Ä–µ–º—è - {appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {appointment.count_of_slots}
""")
    elif option == "–ù–∞–∑–∞–¥":
        async with get_db() as session:
            result = await session.execute(select(Appointment))
            appointments = result.scalars().all()
            keyboard = ReplyKeyboardBuilder()
            for appointment in appointments:
                keyboard.button(
                    text=f"_{appointment.title}_{appointment.id}"
                )
            keyboard.adjust(3)
            keyboard.button(
            text="–°–æ–∑–¥–∞—Ç—å"
            )
            await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–µ–¥–∞—á–∏—Ç—å", reply_markup=keyboard.as_markup(resize_keyboard=True))
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è 
@router.message(TitleApp.data)
async def getDate(message: Message, state : FSMContext):
    msg = message.text
    data = await state.get_data() 
    ID = int(data["ID"])
    async with get_db() as session:
        result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
        appointment = result.scalars().first()
        if appointment:
            appointment.title = msg
            await session.commit()
            await message.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            await message.answer(f"""–î–∞—Ç–∞ - {appointment.date}
–¢–µ–º–∞ - {appointment.title}
–í—Ä–µ–º—è - {appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {appointment.count_of_slots}
""")
            await state.clear()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π –¥–∞—Ç—ã 
@router.message(DateApp.data)
async def getDate(message: Message, state : FSMContext):
    msg = message.text
    data = await state.get_data() 
    ID = int(data["ID"])
    async with get_db() as session:
        result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
        appointment = result.scalars().first()
        if appointment:
            appointment.date = msg
            await session.commit()
            await message.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            await message.answer(f"""–î–∞—Ç–∞ - {appointment.date}
–¢–µ–º–∞ - {appointment.title}
–í—Ä–µ–º—è - {appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {appointment.count_of_slots}
""")
            await state.clear()

@router.message(TimeApp.data)
async def getDate(message: Message, state : FSMContext):
    msg = message.text
    data = await state.get_data() 
    ID = int(data["ID"])
    
    async with get_db() as session:
        result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
        appointment = result.scalars().first()
        if appointment:
            appointment.time = msg
            await session.commit()
            await message.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            await message.answer(f"""–î–∞—Ç–∞ - {appointment.date}
–¢–µ–º–∞ - {appointment.title}
–í—Ä–µ–º—è - {appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {appointment.count_of_slots}
""")
            await state.clear()
        
@router.message(SlotApp.data)
async def getDate(message: Message, state : FSMContext):
    msg = message.text
    data = await state.get_data() 
    ID = int(data["ID"])
    
    async with get_db() as session:
        result = await session.execute(select(Appointment).where(Appointment.id == int(ID)))
        appointment = result.scalars().first()
        if appointment:
            appointment.count_of_slots = msg
            await session.commit()
            await message.answer("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ")
            await message.answer(f"""–î–∞—Ç–∞ - {appointment.date}
–¢–µ–º–∞ - {appointment.title}
–í—Ä–µ–º—è - {appointment.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –º–∞–∫—Å–∏–º—É–º - {appointment.count_of_slots}
""")
            await state.clear()